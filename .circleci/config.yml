version: 2.1

parameters:
  image-name:
    type: string
    default: "udacity-capstone-hello-world"
  cluster-name:
    type: string
    default: "eks-udacity-capstone-u9Ck"

executors:
  docker:
    docker:
      - image: docker:stable
  nodejs:
    docker:
      - image: circleci/node:14.15.0-stretch
  python:
    docker:
      - image: circleci/python:3.9.2

workflows:
  k8s:
    jobs:
      - install
      - test:
          requires:
            - install
      - lint-dockerfile:
          requires:
            - test
      - deploy-dev:
          requires:
            - lint-dockerfile
          filters:
            branches:
              only:
                - master
                - /feature\/.*/
                - /fix\/.*/
      - deploy-staging:
          requires:
            - deploy-dev
          filters:
            branches:
              only:
                - master

jobs:
  lint-dockerfile:
    executor: docker
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Run hadolint on Dockerfile
          command: docker run --rm --interactive hadolint/hadolint < Dockerfile
  
  install:
    executor: nodejs
    steps:
      - checkout
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn install --immutable
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

  test:
    executor: nodejs
    steps:
      - checkout
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Run tests
          command: |
            mkdir ~/junit
            yarn install --immutable
            yarn test
          environment:
            MOCHA_FILE: /tmp/junit/test-results.xml
      - store_test_results:
          path: /tmp/junit
      - store_artifacts:
          path: /tmp/junit
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

  deploy-dev:
    executor: python
    environment:
      IMAGE_NAME: << pipeline.parameters.image-name >>
      CLUSTER_NAME: << pipeline.parameters.cluster-name >>
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Login to repository and build docker image
          command: |
            docker build -t ${DOCKER_ID}/${IMAGE_NAME}:${CIRCLE_SHA1} .
            echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_ID} --password-stdin
            docker push ${DOCKER_ID}/${IMAGE_NAME}:${CIRCLE_SHA1}
      - run:
          name: Install awscli and envsubst
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            sudo pip3 install envsubst
      - run:
          name: Install kubectl
          command: |
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: Prepare K8S templates
          command: |
            aws eks update-kubeconfig --name ${CLUSTER_NAME} --region ${AWS_DEFAULT_REGION}
            echo "Testing k8s configuration"
            kubectl cluster-info
            rm -rf .k8s/.generated && mkdir -p .k8s/.generated
            envsubst < .k8s/templates/dev.yml > .k8s/.generated/dev.yml
      - run:
          name: Deploy
          command: |
            kubectl -n dev apply -f .k8s/.generated/ --validate=true
            kubectl -n dev get pods

  deploy-staging:
    executor: python
    environment:
      IMAGE_NAME: << pipeline.parameters.image-name >>
      CLUSTER_NAME: << pipeline.parameters.cluster-name >>
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Install NodeJs
          command: |
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt-get install -y nodejs
      - run:
          name: Login to repository and build docker image
          command: |
            IMAGE_TAG=$(node -p "require('./package.json').version")
            docker build -t ${DOCKER_ID}/${IMAGE_NAME}:${IMAGE_TAG} .
            docker tag ${DOCKER_ID}/${IMAGE_NAME}:${IMAGE_TAG} ${DOCKER_ID}/${IMAGE_NAME}:latest
            echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_ID} --password-stdin
            docker push ${DOCKER_ID}/${IMAGE_NAME}:${IMAGE_TAG}
            docker push ${DOCKER_ID}/${IMAGE_NAME}:latest
      - run:
          name: Install awscli and envsubst
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            sudo pip3 install envsubst
      - run:
          name: Install kubectl
          command: |
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: Prepare K8S templates
          command: |
            aws eks update-kubeconfig --name ${CLUSTER_NAME} --region ${AWS_DEFAULT_REGION}
            echo "Testing k8s configuration"
            kubectl cluster-info
            export IMAGE_TAG=$(node -p "require('./package.json').version")
            rm -rf .k8s/.generated && mkdir -p .k8s/.generated
            envsubst < .k8s/templates/staging.yml > .k8s/.generated/staging.yml
      - run:
          name: Deploy
          command: |
            kubectl -n staging apply -f .k8s/.generated/ --validate=true
            kubectl -n staging get pods
